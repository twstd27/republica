---
import { Icon } from "astro-icon/components";
import type { NavItem } from "~/types";

const navItems: Array<NavItem> = [
  { title: "Volver", url: "/", type: "Secondary" },
  // { title: "Registrarse", url: "/registro", type: "Primary" },
];

const { url } = Astro.request;
const auxUrl = url.split('/');
const page = auxUrl[auxUrl.length - 1]

navItems.push({
  title: (page === 'signin') ? "Registrarse" : "Ingresar", url: (page === 'signin') ? "/registro" : "/signin", type: "Primary",
})

---

<header
  id="page-header"
  class="fixed top-0 z-20 flex w-full items-center justify-between border-b px-8 py-4 text-white fixed-header border-default bg-default text-default"
>
  <a class="flex items-center gap-3 hover:!text-default" href="#">
    <h1 class="sr-only">La Rep√∫blica</h1>
    <Icon name="logoRcolor" class="size-16" />
  </a>
  <div>
    <div class="flex items-center gap-6">
      <nav class="hidden sm:block">
        <ul class="flex items-center gap-6">
          {
            navItems.map(({ title, url, type }) => (
              <li>
                <a class={`text-sm hover:underline ${(type === 'Primary') ? "bg-gradient-to-br from-indigo-500 via-fuchsia-500 to-pink-500 rounded-sm py-2 px-8 hover:text-white" : ""}`} href={url}>
                  {title}
                </a>
              </li>
            ))
          }
        </ul>
      </nav>
      <button
        id="open-nav-button"
        type="button"
        class="btn sm:hidden"
        aria-label="Navigation"
      >
        <Icon name="mdi:menu" class="size-8" />
      </button>
    </div>
    <div id="menu-modal" class="modal hidden" aria-hidden="true">
      <div class="fixed inset-0 bg-default px-8 py-4 text-default">
        <div class="space-y-4" role="dialog" aria-modal="true">
          <header class="text-right">
            <button
              id="close-nav-button"
              type="button"
              class="btn"
              aria-label="Close navigation"
            >
              <Icon name="mdi:close" class="size-8" />
            </button>
          </header>
          <div class="flex justify-center">
            <Icon name="logoRcolor" class="size-32" />
          </div>
          <nav>
            <ul class="flex flex-col">
              {
                navItems.map(({ title, url, type }) => (
                  <li>
                    <a class={`block py-4 text-center text-xl ${(type === 'Primary') ? "bg-gradient-to-br from-indigo-500 via-fuchsia-500 to-pink-500 rounded-sm" : ""}`} href={url}>
                      {title}
                    </a>
                  </li>
                ))
              }
            </ul>
          </nav>
        </div>
      </div>
    </div>
  </div>
</header>

<script>
  import MicroModal from "micromodal";
  import invariant from "tiny-invariant";

  const menuModalId = "menu-modal";
  const menu = document.querySelector(`#${menuModalId} ul`);
  const openNavButton = document.querySelector("#open-nav-button");
  const closeNavButton = document.querySelector("#close-nav-button");

  invariant(menu, "menu should not be null");
  invariant(openNavButton, "openNavButton should not be null");
  invariant(closeNavButton, "closeNavButton should not be null");

  const openMenu = () => {
    MicroModal.show(menuModalId, { disableScroll: true });
  };

  const closeMenu = () => {
    MicroModal.close(menuModalId);
  };

  openNavButton.addEventListener("click", openMenu);
  closeNavButton.addEventListener("click", closeMenu);

  menu.addEventListener("click", (event) => {
    if ((event.target as HTMLElement).tagName === "A") {
      closeMenu();
    }
  });
</script>

<noscript>
  <style>
    #open-nav-button {
      display: none;
    }
  </style>
</noscript>

<style>
  .modal.is-open {
    @apply block;
  }
</style>
